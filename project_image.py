# -*- coding: utf-8 -*-
"""projective_transform

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Z_gBLaNOzpgvCkXWAUNcrujhLhR2j47H
"""

import matplotlib.pyplot as plt
import matplotlib.image as mpimg
import cv2
from pylib import Homography

# --- load an image ---
sample = mpimg.imread('camera.jpg')
#monopoly = cv2.cvtColor(monopoly, cv2.COLOR_BGR2RGB)

# --- Plot ---
fig, axes = plt.subplots(1, 3, figsize=(18, 6))

# Original image
axes[0].imshow(sample)
axes[0].set_title("Original Camera Image")
axes[0].axis('off')


# Method 1: Using cv2.warpPerspective (recommended - faster and handles interpolation)
# Get image dimensions
height, width = sample.shape[:2]
print(f"Image dimensions: {width}x{height}")

h = Homography(width, height, pitch_angle_degrees=25, clockwise=False)
h.translate()
H = h.matrix
warped_image = cv2.warpPerspective(sample, H, h.dimensions_cropped)
print(h.matrix_glsl)
# Warped image using cv2.warpPerspective
axes[1].imshow(warped_image)
axes[1].set_title("Warped Image (Homography Applied)")
axes[1].axis('on')

# Overlay showing transformation of corner points
axes[2].imshow(sample, alpha=0.5)

corners_original = h.bounding_box_original
corners_projected = h.bounding_box_projected

axes[2].plot(corners_original[:, 0], corners_original[:, 1], 'b-', linewidth=2, label="Original corners")
axes[2].plot(corners_projected[:, 0], corners_projected[:, 1], 'r-', linewidth=2, label="Projected corners")
axes[2].set_title("Corner Transformation Overlay")
axes[2].legend()
axes[2].axis('off')

plt.tight_layout()
plt.show()
